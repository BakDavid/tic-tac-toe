{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kOAIA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKPC,E,kKACJ,SAAaC,GAAI,IAAD,OACd,OAAO,cAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAC3BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,KAC7BA,K,oBAGrB,WAGE,IAFA,IACIE,EAAU,GACLF,EAAI,EAAGA,EAFE,EAEaA,IAAK,CAElC,IADA,IAAIG,EAAM,GACDC,EAAI,EAAGA,EAJA,EAIeA,IAC7BD,EAAIE,KAAKJ,KAAKK,aALA,EAKaN,EAAYI,IAEzCF,EAAQG,KAAK,qBAAaT,UAAU,YAAvB,SAAoCO,GAA1BH,IAEzB,OACE,8BAAME,Q,GAlBQK,IAAMC,WAuBpBC,E,kDACJ,WAAYd,GAAO,IAAD,8BAChB,cAAMA,IACDe,MAAQ,CACXC,QAAU,CAAC,CACTT,QAAUU,MAAM,GAAGC,KAAK,QAE1BC,WAAY,EACZC,SAAS,GAPK,E,+CAUlB,SAAYf,GACV,IAAMW,EAAUV,KAAKS,MAAMC,QAAQK,MAAM,EAAEf,KAAKS,MAAMI,WAAa,GAE7DZ,EADUS,EAAQA,EAAQM,OAAS,GACjBf,QAAQc,QAC7BE,EAAgBhB,IAAYA,EAAQF,KAGvCE,EAAQF,GAAKC,KAAKS,MAAMK,QAAU,IAAM,IACxCd,KAAKkB,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBlB,QAASA,KAEXY,WAAYH,EAAQM,OACpBF,SAAUd,KAAKS,MAAMK,a,oBAGzB,SAAOM,GACLpB,KAAKkB,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,oBAG5B,WAAU,IAcJC,EAdG,OACDX,EAAUV,KAAKS,MAAMC,QACrBY,EAAUZ,EAAQV,KAAKS,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQrB,SAEjCuB,EAAQd,EAAQe,KAAI,SAACL,EAAKM,GAC9B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACE,6BACE,wBAAQ9B,QAAS,kBAAM,EAAKgC,OAAOF,IAAnC,SAA2CC,KADpCD,MAYb,OAJEL,EADEE,EACO,WAAaA,EAEb,iBAAmBvB,KAAKS,MAAMK,QAAU,IAAM,KAGvD,sBAAKnB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASqB,EAAQrB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,QAErC,sBAAKJ,UAAU,YAAf,UACE,8BAAM0B,IACN,6BAAKG,c,GA9DIlB,IAAMC,WA4EzB,SAASU,EAAgBhB,GAWvB,IAVA,IAAM6B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA/B,EAAI,EAAGA,EAAI+B,EAAMd,OAAQjB,IAAK,CACrC,kBAAkB+B,EAAM/B,GAAxB,GAAOgC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GACpE,OAAOhC,EAAQ8B,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.d5bdd405.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return <Square value={this.props.squares[i]}\r\n                  onClick={() => this.props.onClick(i)}\r\n                  key={i} />;\r\n  }\r\n\r\n  render() {\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < boardSize; j++) {\r\n        row.push(this.renderSquare(i*boardSize+j));\r\n      }\r\n      squares.push(<div key={i} className=\"board-row\">{row}</div>)\r\n    }\r\n    return (\r\n      <div>{squares}</div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history : [{\r\n        squares : Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    }\r\n  }\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if(calculateWinner(squares) || squares[i]){\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n  jumpTo(step){\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step,move) => {\r\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}/>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}"],"sourceRoot":""}